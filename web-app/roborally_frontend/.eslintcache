[{"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\index.tsx":"1","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\App.tsx":"3","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\BoardComponent.tsx":"4","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\context\\GameContextProvider.tsx":"5","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\GamesComponent.tsx":"6","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\context\\GameContext.ts":"7","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\SpaceComponent.tsx":"8","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\api\\GameApi.ts":"9","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\GameComponent.tsx":"10"},{"size":533,"mtime":1623669439238,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1623669439239,"results":"13","hashOfConfig":"12"},{"size":812,"mtime":1623697597464,"results":"14","hashOfConfig":"12"},{"size":5798,"mtime":1623697750319,"results":"15","hashOfConfig":"12"},{"size":11606,"mtime":1623763727472,"results":"16","hashOfConfig":"12"},{"size":3744,"mtime":1623673575924,"results":"17","hashOfConfig":"12"},{"size":1431,"mtime":1623695605434,"results":"18","hashOfConfig":"12"},{"size":2439,"mtime":1623696403838,"results":"19","hashOfConfig":"12"},{"size":1942,"mtime":1623755135901,"results":"20","hashOfConfig":"12"},{"size":4473,"mtime":1623669439236,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"2bt6en",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\index.tsx",[],["45","46"],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\App.tsx",[],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\BoardComponent.tsx",[],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\context\\GameContextProvider.tsx",["47","48","49","50","51"],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\GamesComponent.tsx",["52","53","54","55","56","57"],"import React, { FunctionComponent, useContext, useState } from 'react';\r\nimport GameContext from \"../context/GameContext\";\r\nimport { GameComponent } from \"./GameComponent\";\r\nimport styles from \"../styling/BoardComponent.module.scss\" //Import css module\r\nimport { Typography, Button, FormControl, InputLabel, Input, TextField } from \"@material-ui/core\";\r\nimport GameApi from '../api/GameApi';\r\n\r\n/**\r\n * @Author: Jonathan ZÃ¸rn\r\n * @Author: Niklas Jessen\r\n */\r\n\r\n\r\ntype GamesComponentProps = {\r\n\r\n}\r\nconst GamesComponent: FunctionComponent<GamesComponentProps> = () => {\r\n\r\n    const { games, loaded } = useContext(GameContext)\r\n    const { createGame } = useContext(GameContext)\r\n\r\n    const [formData, setFormData] = useState({ inputName: String })\r\n\r\n    const [inputName, setinputName] = useState('');\r\n\r\n    const handleClick = () => {\r\n        console.log(\"new game name: \" + inputName)\r\n        createGame(inputName)\r\n    };\r\n\r\n    return (\r\n        <div id=\"everything\">\r\n            {\r\n                !loaded ?\r\n                    <div>\r\n                        <div className={styles.centerHori}>\r\n                            <Typography variant=\"h2\">RoboRally</Typography>\r\n                            <br />\r\n                            <div>\r\n                                <Typography variant=\"h6\">Create a new game:</Typography>\r\n                                <form className={styles.centerButtons}>\r\n\r\n                                    {/* \r\n                                This snippet of html has been taken from:\r\n                                https://stackoverflow.com/questions/57810595/material-ui-how-to-extract-the-value-of-the-text-field\r\n                                By StackOverflow user: @Ido, https://stackoverflow.com/users/10641422/ido\r\n                                */}\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        margin=\"normal\"\r\n                                        required\r\n                                        name=\"inputName\"\r\n                                        label=\"Game name\"\r\n                                        type=\"inputName\"\r\n                                        id=\"inputName\"\r\n                                        autoComplete=\"current-inputName\"\r\n                                        value={inputName}\r\n                                        onChange={(event) => { setinputName(event.target.value) }} //whenever the text field change, you save the value in state\r\n                                    />\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={handleClick}\r\n                                    >\r\n                                        Create game\r\n                                    </Button>\r\n                                </form>\r\n                            </div>\r\n                            <br />\r\n                            <br />\r\n                            <br />\r\n                            <br />\r\n                        </div>\r\n                        <Typography variant=\"h5\">Games</Typography>\r\n\r\n                        <div className={styles.container} >\r\n                            {games.map((game, index) =>\r\n                                <GameComponent key={\"game\" + index} game={game} />\r\n                            )\r\n                            }\r\n                        </div>\r\n\r\n                    </div >\r\n                    :\r\n                    <div />\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default GamesComponent\r\n\r\n\r\n","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\context\\GameContext.ts",[],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\SpaceComponent.tsx",["58"],"import { FunctionComponent, useCallback, useContext, useMemo } from \"react\";\r\nimport { Space } from \"../types/Space\";\r\nimport { Game } from \"../types/Game\";\r\nimport GameContext from \"../context/GameContext\";\r\nimport styles from \"../styling/SpaceComponent.module.scss\"\r\n\r\nexport type SpaceComponentProps = {\r\n    space: Space\r\n}\r\n/*\r\n Note that we are explicitly specifying that SpaceComponent is of the type FunctionComponent,\r\n and that the props are of type SpaceComponentProps, also note that we use object destructuring to \"unpack\" the props.\r\n */\r\n\r\nexport const SpaceComponent: FunctionComponent<SpaceComponentProps> = ({ space }) => {\r\n    const { board, setCurrentPlayerOnSpace, switchCurrentPlayer, } = useContext(GameContext)\r\n    //Below we essentially define a new variable using the useMemo hook, which can only take the value \"white\" or \"black\"\r\n    //Additionally the code inside the hook (the calculation of whether it is black or white) is only executed\r\n    // when the space prop updates (this is known as the dependencies of the hook)\r\n    const color = useMemo<\"white\" | \"black\">(() => {\r\n        if ((space.x + space.y) % 2 === 0) {\r\n            return \"white\"\r\n        } else {\r\n            return \"black\"\r\n        }\r\n    }, [space])\r\n    //We define a function using the useCallback hook, it returns a memoized callback/function that is only\r\n    // updated when the dependencies update.\r\n    const onClickField = useCallback(async () => {\r\n        if (!space.playerId) { // A shorthand, check equivalents at https://bit.ly/2MnA4Rk\r\n            await setCurrentPlayerOnSpace(space).then(() =>\r\n                switchCurrentPlayer()\r\n            )\r\n        }\r\n\r\n    }, [setCurrentPlayerOnSpace, space, switchCurrentPlayer])\r\n    const playerColor = useMemo(() => {\r\n        const res = board.playerDtos.find(value => value.playerId === space.playerId)\r\n        if (res) return res.playerColor\r\n    }, [board.playerDtos, space.playerId])\r\n    return (\r\n        //The classname is set dynamically and can either take the value styles.whiteSpace or styles.blackSpace\r\n        //We also define that the callback should be called when the div is clicked\r\n        <div className={styles[color + \"Space\"]} onClick={onClickField}>\r\n            {/*if space.player is set render the div*/}\r\n            {(space.playerId && playerColor) && <div className={styles[playerColor + \"Player\"]} />}\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\api\\GameApi.ts",[],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\GameComponent.tsx",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":73,"column":13,"nodeType":"65","messageId":"66","endLine":73,"endColumn":37},{"ruleId":"67","severity":1,"message":"68","line":78,"column":8,"nodeType":"69","endLine":78,"endColumn":78,"suggestions":"70"},{"ruleId":"63","severity":1,"message":"64","line":204,"column":21,"nodeType":"65","messageId":"66","endLine":204,"endColumn":45},{"ruleId":"63","severity":1,"message":"64","line":209,"column":17,"nodeType":"65","messageId":"66","endLine":209,"endColumn":48},{"ruleId":"63","severity":1,"message":"64","line":217,"column":13,"nodeType":"65","messageId":"66","endLine":217,"endColumn":39},{"ruleId":"71","severity":1,"message":"72","line":5,"column":30,"nodeType":"73","messageId":"74","endLine":5,"endColumn":41},{"ruleId":"71","severity":1,"message":"75","line":5,"column":43,"nodeType":"73","messageId":"74","endLine":5,"endColumn":53},{"ruleId":"71","severity":1,"message":"76","line":5,"column":55,"nodeType":"73","messageId":"74","endLine":5,"endColumn":60},{"ruleId":"71","severity":1,"message":"77","line":6,"column":8,"nodeType":"73","messageId":"74","endLine":6,"endColumn":15},{"ruleId":"71","severity":1,"message":"78","line":22,"column":12,"nodeType":"73","messageId":"74","endLine":22,"endColumn":20},{"ruleId":"71","severity":1,"message":"79","line":22,"column":22,"nodeType":"73","messageId":"74","endLine":22,"endColumn":33},{"ruleId":"71","severity":1,"message":"80","line":3,"column":10,"nodeType":"73","messageId":"74","endLine":3,"endColumn":14},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'board.boardId' and 'games'. Either include them or remove the dependency array.","ArrayExpression",["83"],"@typescript-eslint/no-unused-vars","'FormControl' is defined but never used.","Identifier","unusedVar","'InputLabel' is defined but never used.","'Input' is defined but never used.","'GameApi' is defined but never used.","'formData' is assigned a value but never used.","'setFormData' is assigned a value but never used.","'Game' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},"Update the dependencies array to be: [games, board.boardId, gameId, currentPlayer, spaces, players, currentPlayerIndex, addToast]",{"range":"86","text":"87"},[3856,3926],"[games, board.boardId, gameId, currentPlayer, spaces, players, currentPlayerIndex, addToast]"]