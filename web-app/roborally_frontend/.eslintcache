[{"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\index.tsx":"1","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\App.tsx":"3","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\BoardComponent.tsx":"4","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\context\\GameContextProvider.tsx":"5","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\GamesComponent.tsx":"6","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\context\\GameContext.ts":"7","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\SpaceComponent.tsx":"8","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\api\\GameApi.ts":"9","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\GameComponent.tsx":"10"},{"size":533,"mtime":1623070822668,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1623070822669,"results":"13","hashOfConfig":"12"},{"size":793,"mtime":1623158903263,"results":"14","hashOfConfig":"12"},{"size":4678,"mtime":1623161879919,"results":"15","hashOfConfig":"12"},{"size":11462,"mtime":1623160592184,"results":"16","hashOfConfig":"12"},{"size":2469,"mtime":1623349494579,"results":"17","hashOfConfig":"12"},{"size":1343,"mtime":1623154498216,"results":"18","hashOfConfig":"12"},{"size":2359,"mtime":1623070822667,"results":"19","hashOfConfig":"12"},{"size":1705,"mtime":1623154445222,"results":"20","hashOfConfig":"12"},{"size":4408,"mtime":1623160904404,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"2bt6en",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\index.tsx",[],["44","45"],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\App.tsx",[],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\BoardComponent.tsx",["46"],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\context\\GameContextProvider.tsx",["47"],"import React, { ReactNode, useCallback, useEffect, useMemo, useState } from \"react\"\r\nimport GameContext from \"./GameContext\"\r\nimport { Player } from \"../types/Player\";\r\nimport { Board } from \"../types/Board\";\r\nimport { Space } from \"../types/Space\";\r\nimport { Game } from \"../types/Game\";\r\nimport GameApi from \"../api/GameApi\";\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\n\r\ntype GameContextProviderPropsType = {\r\n    children: ReactNode\r\n}\r\n\r\n\r\nconst GameContextProvider = ({ children }: GameContextProviderPropsType) => {\r\n    const [games, setGames] = useState<Game[]>([])\r\n\r\n    const [loaded, setLoaded] = useState<boolean>(false)\r\n\r\n    // For notifications\r\n    const { addToast } = useToasts();\r\n\r\n    /*\r\n    useEffect(() => {\r\n        GameApi.getBoard(gameId).then(board => {\r\n            setSpaces(board.spaceDtos)\r\n            setPlayers(board.playerDtos)\r\n            setWidth(board.width)\r\n            setHeight(board.height)\r\n            setGameId(board.boardId)\r\n            setGameName(board.boardName)\r\n            if (board.currentPlayerDto) {\r\n                setCurrentPlayer(board.currentPlayerDto)\r\n                board.playerDtos.forEach((player, index) => {\r\n                    if (player.playerId === board.currentPlayerDto?.playerId) {\r\n                        setCurrentPlayerIndex(index)\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n            setLoaded(true)\r\n        }).catch(() => {\r\n            console.error(\"Error while fetching board from backend\")\r\n        })\r\n    }, [])\r\n    */\r\n    //The code below is executed when the provider is rendered (inside App.tsx)\r\n    //The code should fetch the data from the API instead of using a static assignment\r\n    //Define a useState variable, note that useState returns an array, containing that state itself aswell as\r\n    // a function to set a new state value, here we use array destructuring (the [..., ...] notation).\r\n    // we also declare that the state variable and setter should be of type /take type Player[]\r\n    const [players, setPlayers] = useState<Player[]>([])\r\n    const playerCount = useMemo(() => players.length, [players])\r\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0)\r\n    const [currentPlayer, setCurrentPlayer] = useState<Player>({ playerId: -1, playerColor: \"red\", boardId: -1, playerName: \"\" })\r\n    const [spaces, setSpaces] = useState<Space[][]>([])\r\n    const [width, setWidth] = useState<number>(0)\r\n    const [height, setHeight] = useState<number>(0)\r\n    const [gameId, setGameId] = useState<number>(0)\r\n    const [gameName, setGameName] = useState<string>(\"hi\")\r\n\r\n    //Define a function used to set a player ona  specific space\r\n    const setPlayerOnSpace = useCallback(async (space: Space) => {\r\n        //Check if space already has a player standing on it\r\n        if (!space.playerId) {\r\n            await GameApi.moveCurrentPlayer(gameId, { ...space, playerId: currentPlayer.playerId }).then(() => {\r\n                let tempSpaces = [...spaces] //Use spread operator to copy spaces array, needed for making immutable changes\r\n                //See https://bit.ly/2My8Bfz, until the section about Immutable.js\r\n                tempSpaces[space.x][space.y].playerId = currentPlayer.playerId //Set the player on the new space they clicked on\r\n\r\n                if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) { //If the player was standing on a space previously, remove them from that space\r\n                    // FIXME: Theres a warning here. It is from the original backend. I dont think it affects anything tho.\r\n                    tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\r\n                }\r\n                setSpaces(tempSpaces)\r\n                let tempPlayers = [...players]\r\n                tempPlayers[currentPlayerIndex].x = space.x; //Update the players array to reflect the changes\r\n                tempPlayers[currentPlayerIndex].y = space.y; //Update the players array to reflect the changes\r\n                setPlayers(tempPlayers)\r\n                setCurrentPlayer({ ...currentPlayer, x: space.x, y: space.y }) //Update current player\r\n\r\n            }).catch(() => {\r\n                console.error(\"Error while moving player\")\r\n            })\r\n\r\n        }\r\n\r\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\r\n\r\n    const switchToNextPlayer = useCallback(async () => {\r\n        await GameApi.switchPlayer(gameId).then(() => {\r\n            const newPlayerIndex = (currentPlayerIndex + 1) % playerCount\r\n            console.log(\"old player index\", currentPlayerIndex, \"new player index\", newPlayerIndex)\r\n            setCurrentPlayer(players[newPlayerIndex])\r\n            setCurrentPlayerIndex(newPlayerIndex)\r\n        }).catch(() => console.error(\"Error while switching player\"))\r\n\r\n    }, [currentPlayerIndex, gameId, playerCount, players])\r\n    const board = useMemo<Board>(() => {\r\n        return ({\r\n            spaceDtos: spaces,\r\n            playerDtos: players,\r\n            currentPlayerDto: currentPlayer,\r\n            currentPlayerIndex: currentPlayerIndex,\r\n            width: width,\r\n            height: height,\r\n            boardName: gameName,\r\n            boardId: gameId\r\n        })\r\n    }, [currentPlayer, currentPlayerIndex, gameId, gameName, height, players, spaces, width])\r\n\r\n    // Copied from \"Live-mÃ¸de_Uge 12_-20210503_131255-Meeting Recording.mp4\"\r\n    const selectGame = useCallback(async (game: Game) => {\r\n        GameApi.getBoard(game.gameId).then(board => {\r\n            setSpaces(board.spaceDtos)\r\n            setPlayers(board.playerDtos)\r\n            setWidth(board.width)\r\n            setHeight(board.height)\r\n            setGameId(board.boardId)\r\n            setGameName(board.boardName)\r\n            if (board.currentPlayerDto) {\r\n                setCurrentPlayer(board.currentPlayerDto)\r\n                board.playerDtos.forEach((player, index) => {\r\n                    if (player.playerId === board.currentPlayerDto?.playerId) {\r\n                        setCurrentPlayerIndex(index)\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n            setLoaded(true)\r\n        }).catch(() => {\r\n            console.error(\"Error while fetching board from backend\")\r\n        })\r\n\r\n    }, [])\r\n\r\n    const unselectGame = useCallback(async () => {\r\n        setGameId(-1);\r\n        setLoaded(false);\r\n    }, [])\r\n\r\n    // Copied from \"Live-mÃ¸de_Uge 13_-20210510_130431-Meeting Recording.mp4\"\r\n    useEffect(() => {\r\n        const interval = setInterval(async () => {\r\n            if (loaded && gameId >= 0) {\r\n                GameApi.getBoard(gameId).then(board => {\r\n                    if (gameId === board.boardId) {\r\n                        setSpaces(board.spaceDtos)\r\n                        setPlayers(board.playerDtos)\r\n                        setWidth(board.width)\r\n                        setHeight(board.height)\r\n                        setGameId(board.boardId)\r\n                        setGameName(board.boardName)\r\n                        if (board.currentPlayerDto) {\r\n                            setCurrentPlayer(board.currentPlayerDto)\r\n                            board.playerDtos.forEach((player, index) => {\r\n                                if (player.playerId === board.currentPlayerDto?.playerId) {\r\n                                    setCurrentPlayerIndex(index)\r\n                                }\r\n                            })\r\n                        } else {\r\n                            console.error(\"Load outdated\")\r\n                        }\r\n                    }\r\n                }).catch(() => {\r\n                    console.error(\"Board could not be loaded\")\r\n                })\r\n            } else {\r\n                GameApi.getGames().then(games => {\r\n                    setGames(games)\r\n                }).catch(() => {\r\n                    console.error(\"Games could not be loaded\")\r\n                })\r\n\r\n            }\r\n\r\n        }, 2000)\r\n\r\n        return () => clearInterval(interval)\r\n    }, [loaded, gameId])\r\n\r\n\r\n    /**\r\n     * Function that removes a certain game from id\r\n     * @author: Jonathan ZÃ¸rn\r\n     */\r\n    const deleteGame = useCallback(async (game: Game) => {\r\n        GameApi.deleteGame(game.gameId).then(() => {\r\n            console.log(\"Deleting game: \" + game.gameId)\r\n            addToast('Game deleted!', { appearance: 'success' });\r\n        }).catch(() => {\r\n            console.error(\"Error while deleting board from backend\")\r\n            addToast('Error while deleting board from backend!', { appearance: 'error' });\r\n        })\r\n\r\n    }, [])\r\n\r\n    /**\r\n     * Function that starts a game if its valid\r\n     * @author: Jonathan ZÃ¸rn\r\n     */\r\n    const startGame = useCallback(async (game: Game) => {\r\n        if (game.gameUsers.length >= 2) {\r\n            if (!game.gameStarted) {\r\n                GameApi.startGame(game.gameId).then(() => {\r\n                    game.gameStarted = true;\r\n                    console.log(\"Starting game: \" + game.gameId)\r\n                    addToast('Starting game!', { appearance: 'success' });\r\n                }).catch(() => {\r\n                    console.error(\"Error while starting game from backend\")\r\n                    addToast('Error while starting game from backend!', { appearance: 'error' });\r\n                })\r\n            } else {\r\n                console.log(\"Game already started: \" + game.gameId + \" id\")\r\n                addToast('Game is already started!', { appearance: 'warning' });\r\n\r\n            }\r\n\r\n        } else {\r\n            // Logic if games do not have enough players\r\n            console.log(\"Not enough players to start game: \" + game.gameId + \" id\")\r\n            console.log(\"Players in game:\" + game.gameUsers.length)\r\n            addToast('Not enough players to start game!', { appearance: 'warning' });\r\n        }\r\n    }, [addToast])\r\n\r\n    /**\r\n     * Function that ends a game if its valid\r\n     * @author: Jonathan ZÃ¸rn\r\n     */\r\n    const endGame = useCallback(async (game: Game) => {\r\n        if (game.gameStarted) {\r\n            GameApi.endGame(game.gameId).then(() => {\r\n                game.gameStarted = false;\r\n                console.log(\"Ending game: \" + game.gameId);\r\n                addToast('Game ended!', { appearance: 'success' });\r\n            }).catch(() => {\r\n                console.error(\"Error while ending game from backend\")\r\n                addToast('Error while ending game from backend!', { appearance: 'error' });\r\n            })\r\n        } else {\r\n            console.log(\"Game already stopped: \" + game.gameId + \" id\")\r\n            addToast('Game is already stopped!', { appearance: 'warning' });\r\n        }\r\n    }, [addToast])\r\n\r\n\r\n    return (\r\n        <GameContext.Provider\r\n            value={\r\n                {\r\n                    games: games,\r\n                    selectGame: selectGame,\r\n                    unselectGame: unselectGame,\r\n                    deleteGame: deleteGame,\r\n                    startGame: startGame,\r\n                    endGame: endGame,\r\n                    loaded: loaded,\r\n                    board: board,\r\n                    setCurrentPlayerOnSpace: setPlayerOnSpace,\r\n                    switchCurrentPlayer: switchToNextPlayer\r\n                }\r\n            }>\r\n            {children} {/*See: https://reactjs.org/docs/composition-vs-inheritance.html*/}\r\n        </GameContext.Provider>\r\n    )\r\n}\r\n\r\nexport default GameContextProvider","C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\GamesComponent.tsx",["48","49"],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\context\\GameContext.ts",[],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\SpaceComponent.tsx",[],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\api\\GameApi.ts",[],"C:\\Users\\jonat\\Documents\\GitHub\\Roborally_Gruppe1\\web-app\\roborally_frontend\\src\\components\\GameComponent.tsx",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":35,"column":10,"nodeType":"56","messageId":"57","endLine":35,"endColumn":15},{"ruleId":"58","severity":1,"message":"59","line":199,"column":8,"nodeType":"60","endLine":199,"endColumn":10,"suggestions":"61"},{"ruleId":"54","severity":1,"message":"62","line":5,"column":30,"nodeType":"56","messageId":"57","endLine":5,"endColumn":39},{"ruleId":"54","severity":1,"message":"63","line":5,"column":73,"nodeType":"56","messageId":"57","endLine":5,"endColumn":87},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"@typescript-eslint/no-unused-vars","'start' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'addToast'. Either include it or remove the dependency array.","ArrayExpression",["66"],"'TextField' is defined but never used.","'FormHelperText' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [addToast]",{"range":"69","text":"70"},[8611,8613],"[addToast]"]